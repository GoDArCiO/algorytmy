#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <math.h>
#define MLD 1000000000.0

void bubbleSort(int arr[], int start, int end);
int Partition(int A[],int l, int p);
int Quicksort(int A[], int p, int r);
int Quicksort2(int A[], int p, int r);

int main(){
int srednia;
time_t t;
srand((unsigned) time(&t));
    struct timespec czas1, czas2;
    double czasWykonania[16];
char filename[100];
//################ustaw dane wejsciowe#################
    int i=0,a,j,q=0;
    int A[4]={5000,8000,10000,12000};
while (q<4){
    j=A[q];
    sprintf( filename, "random-%d.txt", j );
FILE *fw=fopen(filename,"w");
   for(int i=0;i<j;i++){
       a=rand() % 25000;
        fprintf(fw,"%d\n",a);
    }
        fclose(fw);
        q++;
        }
        printf("wprowadzono losowe dane do plikow\n");
        q=0;
while (q<4){
    j=A[q];
    sprintf( filename, "rosnace-%d.txt", j );
FILE *fw=fopen(filename,"w");
   for(int i=0;i<j;i++){
        fprintf(fw,"%d\n",i);
    }
        fclose(fw);
        q++;
        }
    printf("wprowadzono dane uporzadkowane rosnaco do plikow\n");
//#####################wczytaj-sortuj-zapisz########################
q=0;
while (q<4){
    j=A[q];
    sprintf( filename, "random-%d.txt", j );
FILE *f=fopen(filename,"r");
    sprintf( filename, "wynik-random-%d.txt", j );
FILE *fw=fopen(filename,"w");
char str[100];
    int j=0,B[100001];
    while (fgets(str,100, f)) {
        sscanf(str,"%d",&B[j]);
        j++;
    }

for (srednia=0;srednia!=10;srednia++){

    clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas1);
Quicksort(B,0,j-1);
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas2);

    czasWykonania[q] += (czas2.tv_sec+czas2 .tv_nsec/MLD)-(czas1.tv_sec+czas1.tv_nsec/MLD);

}czasWykonania[q]/=10;

       for(int i=0;i<j;i++){
        fprintf(fw,"%d\n",B[i]);
    }
    
    fclose(f);
    fclose(fw);
    q++;
}
q=0;
while (q<4){
    j=A[q];
    sprintf( filename, "rosnace-%d.txt", j );
FILE *f=fopen(filename,"r");
    sprintf( filename, "wynik-rosnace-%d.txt", j );
FILE *fw=fopen(filename,"w");
char str[100];
    int j=0,B[100001];
    while (fgets(str,100, f)) {
        sscanf(str,"%d",&B[j]);
        j++;
    }

for (srednia=0;srednia!=10;srednia++){

    clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas1);
Quicksort(B,0,j-1);
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas2);

    czasWykonania[q+4] += (czas2.tv_sec+czas2 .tv_nsec/MLD)-(czas1.tv_sec+czas1.tv_nsec/MLD);

}czasWykonania[q+4]/=10;
   for(int i=0;i<j;i++){
        fprintf(fw,"%d\n",B[i]);
    }
    fclose(f);
    fclose(fw);
    q++;
}
q=0;
while (q<4){
    j=A[q];
    sprintf( filename, "rosnace-%d.txt", j );
FILE *f=fopen(filename,"r");
    sprintf( filename, "wynik-rosnace-%d.txt", j );
FILE *fw=fopen(filename,"w");
char str[100];
    int j=0,B[100001];
    while (fgets(str,100, f)) {
        sscanf(str,"%d",&B[j]);
        j++;
    }

for (srednia=0;srednia!=10;srednia++){

    clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas1);
Quicksort2(B,0,j-1);
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas2);

    czasWykonania[q+8] += (czas2.tv_sec+czas2 .tv_nsec/MLD)-(czas1.tv_sec+czas1.tv_nsec/MLD);

}czasWykonania[q+8]/=10;
   for(int i=0;i<j;i++){
        fprintf(fw,"%d\n",B[i]);
    }
    fclose(f);
    fclose(fw);
    q++;
}
q=0;
while (q<4){
    j=A[q];
    sprintf( filename, "rosnace-%d.txt", j );
FILE *f=fopen(filename,"r");
    sprintf( filename, "wynik-rosnace-%d.txt", j );
FILE *fw=fopen(filename,"w");
char str[100];
    int j=0,B[100001];
    while (fgets(str,100, f)) {
        sscanf(str,"%d",&B[j]);
        j++;
    }

for (srednia=0;srednia!=10;srednia++){

    clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas1);
Quicksort2(B,0,j-1);
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas2);

    czasWykonania[12+q] += (czas2.tv_sec+czas2 .tv_nsec/MLD)-(czas1.tv_sec+czas1.tv_nsec/MLD);

}czasWykonania[12+q]/=10;
   for(int i=0;i<j;i++){
        fprintf(fw,"%d\n",B[i]);
    }
    fclose(f);
    fclose(fw);
    q++;
}
//##############wypisz ile czasu co zajelo###########################
q=0;
j=0;
printf("\n Srednia z 10prob\n");
printf("               QS                            QS+BS\n");
printf("           losowe    rosnace   |        losowe      rosnace\n");
while(q<4){
printf(" %d -> %3.5lf    %3.5lf   |       %3.5lf     %3.5lf \n",A[j], czasWykonania[q],czasWykonania[q+4],czasWykonania[q+8],czasWykonania[q+12]);
        j++;
        q++;
}

return 0;
    }//koneic main#################################################################3


  
void bubbleSort(int a[], int start, int end) 
    { 
       int i, j; 
       for (i = start; i < end; i++){   
        
           for (j = start; j < end; j++){  
               if (a[j] > a[j+1]) {
                 int temp = a[j+1];
                 a[j+1] = a[j];
                 a[j] = temp;
                  
    }
    }
       }
    }

    int Partition(int A[],int p, int r)
{
int x = A[r];
int i = p-1;
for(int j=p;j<=r;j++)
{
    if(A[j]<=x)
    {
        i++;
        int tmp = A[i];
        A[i]=A[j];
        A[j]=tmp;
    }
}
if(i<r)
    return i;
else
    return i-1;
}
int Quicksort(int A[],int p, int r)
{

    if(p<r)
    {
        int q=Partition(A,p,r);
        Quicksort(A,p,q);
        Quicksort(A,q+1,r);
    }


}
int Quicksort2(int A[],int p, int r)
{
    if(r-p+1>10)
    {if(p<r){
        int q=Partition(A,p,r);
        Quicksort2(A,p,q);
        Quicksort2(A,q+1,r);
    }
    }else{
        bubbleSort(A, p, r-1);
    }
}


