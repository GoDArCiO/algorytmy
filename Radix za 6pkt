#include <string.h>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <math.h>
#include <ctype.h>
#define MLD 1000000000.0

#define ASCII 127

void quickSortMain(char items[][30], int count);
void quickSort(char items[][30], int left, int right);

char **Ar; 
char **Br; 
char **Cr;

void countingSort(char **A, char **B, int NoW, int pos){
        int i,j;
        int C[1000]; 
        for (i=0;i<=ASCII;i++) C[i]=0;
        for (j=1;j<=NoW;j++)
                                C[A[j][pos]] +=1;
        for (i=1;i<=ASCII;i++)
                                C[i]=C[i]+C[i-1];
        for (j=NoW;j>0;j--){
                B[C[A[j][pos]]]=A[j];
                C[A[j][pos]]=C[A[j][pos]]-1;
        }
}

void radixSort(char **A, char **B, int lw){         
                int i;
                for (i=lw-1; i>=0; i--){
                        countingSort(A,B,20000,i);
                        Cr=A;A=B;B=Cr;                        
                }
}

void save(char **tablica, int j, char **B){
        int i;
        FILE *fwc=fopen("posortowaneC.txt","w");
        for (i=1;i<=j;i++){
                fprintf(fwc,"%s\n",tablica[i]);
        }
            fclose(fwc);
}

void wczytaj(char **tablica, int j, char **B){
        char slowo[30];
        int i;
        for (i=1;i<=j; i++){
                sscanf(B[i-1],"%s",slowo);
                tablica[i] = (char*) malloc(sizeof(char)*30); 
                strcpy(tablica[i],slowo); 
        }
}

int maxLen(char **tablica, int number_of_words){         
                int i,max=0;
                for (i=1;i<=number_of_words;i++)
                        if (strlen(tablica[i])>max) max=strlen(tablica[i]);
                return max;
}

void fillWithZeroes(char **tablica, int NoW, int lw){                                                                            
                int i,j;
                for (i=1; i<=NoW; i++)
                        for (j=0; j<=lw; j++)
                                if (!(47 < (int)tablica[i][j] && (int)tablica[i][j] < 123)) tablica[i][j]=0;
                                
}

int main(){
    time_t t;
srand((unsigned) time(&t));
    struct timespec czas1, czas2;
printf("Pobieram nazwiska...\n");
    int i=0;
char *token;
char str[100];
FILE *f=fopen("kopiec.txt","r");
FILE *fwq=fopen("posortowaneQ.txt","w");
    int j=0;
    char **B=(char**) malloc(20000*sizeof(char*));
    //char **C=(char**) malloc(20000*sizeof(char*));
    char C[20001][30];
    while (fgets(str,100, f)) {
        token = strtok(str, " ");
        token = strtok(NULL, " ");
        //tolower
           while( token[i] ) {
      token[i]=(tolower(token[i]));
      i++;
   }i=0;
B[j] = (char*) malloc(sizeof(char)*30);
        sscanf(token,"%s",B[j]);
//C[j] = (char*) malloc(sizeof(char)*30);
        sscanf(token,"%s",C[j]);
        j++;
    }
printf("Done\n");
printf("Sortuje nazwiska...\n");

//sortuj B radix
        Ar=(char**) malloc(20000*sizeof(char*));
        Br=(char**) malloc(20000*sizeof(char*));
        Cr=(char**) malloc(20000*sizeof(char*));
        wczytaj(Ar,20000,B);
        int longest_word=maxLen(Ar,20000);
        fillWithZeroes(Ar,20000,longest_word);
                clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas1);
        radixSort(Ar,Br,longest_word-2);
                clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas2);
double czasWykonaniaR = (czas2.tv_sec+czas2 .tv_nsec/MLD)-(czas1.tv_sec+czas1.tv_nsec/MLD);
printf(" Radix -> %3.5lf \n", czasWykonaniaR);

    clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas1);
quickSortMain(C, j);
    clock_gettime(CLOCK_PROCESS_CPUTIME_ID,&czas2);
double czasWykonaniaQ = (czas2.tv_sec+czas2 .tv_nsec/MLD)-(czas1.tv_sec+czas1.tv_nsec/MLD);
printf(" Quick -> %3.5lf \n", czasWykonaniaQ);

printf("Done\n");
printf("Zapisuje nazwiska...\n");
       for(i=0;i<j;i++){
        fprintf(fwq,"%s\n",C[i]);
    }
            save(Br,20000,B);
    printf("Done\n");
    fclose(f);
    fclose(fwq);

    printf("Exitting...\n");
return 0;
    }//koneic main#################################################################3

void quickSortMain(char items[][30], int count)
{
  quickSort(items, 0, count-1);
}

void quickSort(char items[][30], int left, int right)
{
  int i, j;
  char *x;
  char temp[30];

  i = left;
  j = right;
  x = items[(left+right)/2];

  do {
    while((strcmp(items[i],x) < 0) && (i < right)) {
       i++;
    }
    while((strcmp(items[j],x) > 0) && (j > left)) {
        j--;
    }
    if(i <= j) {
      strcpy(temp, items[i]);
      strcpy(items[i], items[j]);
      strcpy(items[j], temp);
      i++;
      j--;
   }
  } while(i <= j);

  if(left < j) {
     quickSort(items, left, j);
  }
  if(i < right) {
     quickSort(items, i, right);
  }
}
